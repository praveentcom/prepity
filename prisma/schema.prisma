datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int           @id @default(autoincrement())
  name           String?
  email          String        @unique
  emailVerified  Boolean       @default(false)
  password       String?
  image          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  signupTokens   SignupToken[]
  passwordResetTokens PasswordResetToken[]
  requests       Request[]
  questions      Question[]
  preference     UserPreference?
}

model SignupToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
    id        Int      @id @default(autoincrement())
    token     String   @unique
    userId    Int
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    expires   DateTime
    createdAt DateTime @default(now())

    @@index([userId])
}

enum RequestStatus {
  PENDING
  PROCESSING
  PARTIALLY_CREATED
  CREATED
  FAILED
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Visibility {
  PRIVATE
  PUBLIC
}

enum QuestionType {
  PLAINTEXT
  LATEX
  CODE
}

enum AnswerType {
  PLAINTEXT
  LATEX
  CODE
}

model Request {
  id                 Int           @id @default(autoincrement())
  userId             Int
  user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  category           String
  query              String       @db.Text
  status             RequestStatus @default(PENDING)
  difficulty         Difficulty    @default(MEDIUM)
  initQuestionsCount Int          @default(10)
  questions          Question[]
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  requestSlug        String       @unique
  isStarred          Boolean       @default(false)
  visibility         Visibility    @default(PRIVATE)

  @@index([userId])
}

model Question {
  id               Int      @id @default(autoincrement())
  question         String   @db.Text
  option1          String
  option2          String
  option3          String
  option4          String
  correctOption    Int      @db.SmallInt // 1-4 representing which option is correct
  explanation      String?  @db.Text
  hint            String?  @db.Text
  requestId       Int
  request         Request   @relation(fields: [requestId], references: [id], onDelete: Cascade)
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  isStarred       Boolean  @default(false)
  isAnswered      Boolean  @default(false)
  userAnswer      Int?     @db.SmallInt // 1-4 representing user's answer
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  answeredAt      DateTime?
  questionType    QuestionType
  answerType      AnswerType

  @@index([userId])
  @@index([requestId])
}

model UserPreference {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  llmModel  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
